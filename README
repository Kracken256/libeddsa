About libeddsa
--------------
This is a small cryptographic library, implementing cryptographic signatures 
with ed25519 (see [1]) and diffie-hellman key exchange with curve25519 (see
[2]).

My goal is to give a fast, but still very readable, C implemantation of these
two crypto primitives without any complex framework. (If you need a full and
easy to use framework with symmetric cipher and MAC included, please have a
look at libnacl [3] or libsodium [4] which are both great.)

If you need just ed25519-signatures or curve25519-diffie-hellman with a simple
API, however, libeddsa may be for you: It is small (under 90kb) and very fast.


Features:
  - written in C
  - fast and small
  - cmake build system
  - protection against timing attacks as far as possible in C
  - static and dynamic link support
  - easy to use (see below)
  - public domain license



[1] http://ed25519.cr.yp.to/ed25519-20110705.pdf
[2] http://cr.yp.to/ecdh/curve25519-20060209.pdf
[3] http://nacl.cr.yp.to
[4] https://github.com/jedisct1/libsodium



Build & Install
---------------
First the source must be configured with cmake, from the source directory use:

  mkdir build
  cd build
  cmake ..

if you want to use options (see below), add -D with the wished option to the cmake
command here.

now compile with
  make

and, if wished, install (as root) with
  make install


cmake options
--------------
  USE_STACKCLEAN	cleanup stack after job is done (default: on)
  BUILD_STATIC 		build static library as well (default: on)
  BUILD_TESTING		build selftests, run these with ctest (default: off)



Howto use this library
----------------------
This library is very simple to use, but you are expected to know how
the signing with DSA and key-exchange with Diffie-Hellman works.

  signatures with eddsa (ed25519)
  -------------------------------

  #include <eddsa.h>

  void eddsa_genpub(uint8_t pub[32], const uint8_t sec[32]);
  void eddsa_sign(uint8_t sig[64], const uint8_t sec[32],
		  const uint8_t pub[32], const uint8_t *data, size_t len);
  bool eddsa_verify(const uint8_t sig[64], const uint8_t pub[32],
		    const uint8_t *data, size_t len);


  Secret- and public-key are both 32 bytes long. To generate a secret key
  just fill it with high quality random data. The public key is derived from it
  the secret key by calling eddsa_genpub.

  To sign data use eddsa_sign to generate a 64 byte long signature.

  Verify a signature by calling eddsa_verify: It returns true if the signature is
  ok and false otherwise.


  diffie-hellman (curve25519)
  ---------------------------

  #include <eddsa.h>

  void DH(uint8_t out[32], const uint8_t sec[32], const uint8_t base[32]);

  The common basepoint is

  uint8_t bp[32] = { 9 };

  Alice and Bob both generate 32 byte secrets, secA and secB, with high
  quality random data.

  Alice uses:
    DH(encA, secA, bp)
    <send encA to Bob>
    <receive encB from Bob>
    DH(ss, secA, encB);

  Bob:
    DH(encB, secB, bp);
    <send encB to Alice>
    <receive encA from Alice>
    DH(ss, secB, encA);

  Now both possess the same shared secret ss, which could be used for a symmetric
  cipher.


  using as shared library
  -----------------------
  If the library is correctly installed, all you need is adding
  '-leddsa' to your linker command line. For example:

  cc -o foo foo.c -leddsa


Note to MS Windows users
------------------------
At the moment the 64bit version of this code does not compile under Microsofts Visual
Studio (128bit integers are not supported). Either use the 32bit version
(which compiles fine) or use gcc/clang to compile a DLL and use that in your
Visual Studio project.

If you use the static version of libeddsa, please make sure to compile
your source with EDDSA_STATIC defined (see project properties dialog under
Visual Studio or add -DEDDSA_STATIC to the command line if you are using
gcc/clang under Windows).
